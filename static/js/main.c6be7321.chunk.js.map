{"version":3,"sources":["components/accounts.js","components/orderBook.js","App.js","serviceWorker.js","index.js"],"names":["Accounts","accounts","instruments","className","style","tableLayout","scope","map","account","textAlign","name","balance","instrument","display_order","positions","OrderBook","message","buy_message","sell_message","description","buy_orders","sell_orders","reverse","length","borderWidth","orderListItem","order","action_str","price","width","orderList","App","state","fetch","then","res","json","data","sort","a","b","setState","catch","console","log","this","getInfo","interval","setInterval","clearInterval","key","id","desc","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c6be7321.chunk.js","sourcesContent":["import React from 'react';\n\nconst posColour = (pos) => {\n    if (pos === 0) {\n        return \"FFFFFF\";\n    }\n    if (pos < 0) {\n        return \"F8C2C2\";\n    }\n    return \"ADF1C9\";\n};\n\nconst Accounts = ({ accounts, instruments }) => {\n    return (\n        <table className=\"table table-striped table-hover\" style={{tableLayout: \"fixed\"}}>\n            <tbody>\n                <tr>\n                    <th scope=\"row\">Name</th>\n                    {accounts.map((account) => (\n                        <td style={{textAlign: \"center\"}}><b>{account.name}</b></td>\n                    ))}\n                </tr>\n                <tr>\n                    <th scope=\"row\">Balance</th>\n                    {accounts.map((account) => (\n                        <td style={{textAlign: \"center\"}}>{account.balance}</td>\n                    ))}\n                </tr>\n                {instruments.map((instrument) => (\n                    <tr>\n                        <th scope=\"row\">Event {instrument.display_order}</th>\n                        {accounts.map((account) => (\n                            <td style={{textAlign: \"center\"}}>{account.positions[instrument.display_order]}</td>\n                        ))}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n};\n\nexport default Accounts;","import React from 'react';\n\nconst OrderBook = ({ display_order, description, buy_orders, sell_orders }) => {\n    sell_orders.reverse()\n\n    let message;\n    let buy_message;\n    let sell_message;\n\n    if (buy_orders.length === 0 && sell_orders.length === 0) {\n        message = \"No orders yet\";\n    } else if (buy_orders.length === 0) {\n        buy_message = (\n            <li className=\"list-group-item d-inline-block text-center\" style={{borderWidth: \"1px\"}}>\n                <small>No buy orders yet</small>\n            </li>\n        )\n    } else if (sell_orders.length === 0) {\n        sell_message = (\n            <li className=\"list-group-item d-inline-block text-center\" style={{borderWidth: \"1px\"}}>\n                <small>No sell orders yet</small>\n            </li>\n        )\n    }\n\n    const orderListItem = (order, action_str) => (\n        <li className=\"list-group-item d-flex justify-content-between align-items-center\" style={{borderWidth: \"1px\"}}>\n            {order.name}\n            <span><small>{action_str} for </small> {order.price}</span>\n        </li> \n    )\n\n    const orderList = (buy_orders, sell_orders) => {\n        return (\n            <div className=\"card align-items-center\" style={{width: \"20rem\"}}>\n                <div className=\"card-block text-center m-3\">\n                    <h4 className=\"card-title\">Event {display_order}</h4>\n                    <p className=\"card-text\">{description}</p>\n                </div>\n                <ul className=\"list-group list-group-flush w-100\">\n                    {sell_orders.map(order => orderListItem(order, \"sell\"))}\n                    {sell_message}\n                    <li className=\"list-group-item d-inline-block text-center\" style={{borderWidth: \"1px\"}}>\n                        <small>{message}</small>\n                    </li>\n                    {buy_message}\n                    {buy_orders.map(order => orderListItem(order, \"buy\"))}\n                </ul>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"col-sm mt-5 mb-5\">\n            <div className=\"container\">\n                {orderList(buy_orders, sell_orders)}\n            </div>\n        </div>\n    )\n};\n\nexport default OrderBook;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Accounts from './components/accounts';\nimport OrderBook from './components/orderBook';\n\nclass App extends Component {\n  state = {\n    accounts: [],\n    instruments: []\n  };\n\n  getInfo() {\n    fetch('http://192.168.20.30:5000/info')\n      .then(res => res.json())\n      .then((data) => {\n        data.accounts.sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        });\n        data.instruments.sort((a, b) => {\n          if (a.display_order < b.display_order) return -1;\n          if (a.display_order > b.display_order) return 1;\n          return 0;\n        })\n        this.setState({\n          accounts: data.accounts,\n          instruments: data.instruments\n        });\n      })\n      .catch(console.log)\n  }\n\n  componentDidMount() {\n    this.getInfo()\n    this.interval = setInterval(() => this.getInfo(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.instruments.map((instrument) => (\n            <OrderBook key = {instrument.id} display_order = {instrument.display_order} description = {instrument.desc} \n              buy_orders = {instrument.buy_orders} sell_orders = {instrument.sell_orders} />\n          ))}\n        </div>\n      <Accounts accounts = {this.state.accounts} instruments = {this.state.instruments} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}