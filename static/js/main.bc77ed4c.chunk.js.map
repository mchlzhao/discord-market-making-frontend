{"version":3,"sources":["components/Accounts.js","components/OrderBook.js","components/Markets.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Accounts","accounts","instruments","className","style","tableLayout","scope","width","textAlign","map","account","name","balance","instrument","display_order","desc","padding","verticalAlign","pos","positions","minWidth","Math","abs","OrderBook","buy_message","sell_message","description","buy_orders","sell_orders","length","borderWidth","borderTopColor","orderListItem","order","action_str","price","borderColor","borderTopWidth","borderBottom","borderBottomColor","backgroundColor","orderList","Markets","key","id","withRouter","props","to","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","location","pathname","App","state","fetch","then","res","json","data","sort","a","b","reverse","setState","catch","console","log","this","getInfo","interval","setInterval","clearInterval","basename","path","exact","render","Component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bc77ed4c.chunk.js","sourcesContent":["import React from 'react';\n\nconst posToPillClass = (pos) => {\n    if (pos < 0) return \"badge-danger\";\n    if (pos > 0) return \"badge-success\";\n    return \"\";\n};\n\nconst Accounts = ({ accounts, instruments }) => {\n    return (\n        <div className=\"container mt-5 mb-5\">\n            <table className=\"table table-dark table-striped table-hover\" style={{tableLayout: \"fixed\"}}>\n                <tbody>\n                    <tr>\n                        <th scope=\"row\" style={{width: \"25%\", textAlign: \"left\"}}>Name</th>\n                        {accounts.map((account) => (\n                            <td style={{textAlign: \"center\"}}><b>{account.name}</b></td>\n                        ))}\n                    </tr>\n                    <tr>\n                        <th scope=\"row\" style={{textAlign: \"left\"}}>Balance</th>\n                        {accounts.map((account) => (\n                            <td style={{textAlign: \"center\"}}>{account.balance}</td>\n                        ))}\n                    </tr>\n                    {instruments.map((instrument) => (\n                        <tr>\n                            <th className=\"text-truncate\" scope=\"row\" style={{textAlign: \"left\"}}>\n                                <small>{instrument.display_order}. {instrument.desc}</small>\n                            </th>\n                            {accounts.map((account) => (\n                                <td style={{padding: \"0\", verticalAlign: \"middle\", textAlign: \"center\"}}>\n                                    <h5 className=\"m-0\">\n                                        <span className={\"badge badge-pill \" + posToPillClass(account.positions[instrument.display_order])} style={{minWidth: \"2rem\"}}>\n                                            {Math.abs(account.positions[instrument.display_order])}\n                                        </span>\n                                    </h5>\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default Accounts;","import React from 'react';\n\nconst OrderBook = ({ display_order, description, buy_orders, sell_orders }) => {\n    let buy_message;\n    let sell_message;\n\n    if (buy_orders.length === 0) {\n        buy_message = (\n            <li className=\"list-group-item d-inline-block text-center bg-dark\" style={{borderWidth: \"1px\",\n                    borderTopColor: \"grey\"}}>\n                <small><b>No buy orders yet</b></small>\n            </li>\n        )\n    }\n    if (sell_orders.length === 0) {\n        sell_message = (\n            <li className=\"list-group-item d-inline-block text-center bg-dark\" style={{borderWidth: \"1px\",\n                    borderTopColor: \"grey\"}}>\n                <small><b>No sell orders yet</b></small>\n            </li>\n        )\n    }\n\n    const orderListItem = (order, action_str) => (\n        <li className=\"list-group-item d-flex justify-content-between align-items-center bg-dark\" style={{borderWidth: \"1px\",\n                borderTopColor: \"grey\"}}>\n            {order.name}\n            <span><small>{action_str} for </small> {order.price}</span>\n        </li> \n    )\n\n    const orderList = (buy_orders, sell_orders) => {\n        return (\n            <div className=\"card align-items-center text-white bg-dark\" style={{width: \"20rem\", borderColor: \"grey\"}}>\n                <div className=\"card-block text-center m-3\">\n                    <h4 className=\"card-title\">Event {display_order}</h4>\n                    <p className=\"card-text\">{description}</p>\n                </div>\n                <ul className=\"list-group list-group-flush w-100\">\n                    {sell_orders.map(order => orderListItem(order, \"sell\"))}\n                    {sell_message}\n                    <li className=\"list-group-item d-inline-block text-center\" style={{borderTopWidth: \"1px\", borderBottom: 0,\n                        borderTopColor: \"grey\", borderBottomColor: \"grey\", backgroundColor: \"#262626\"}}>\n                    </li>\n                    {buy_message}\n                    {buy_orders.map(order => orderListItem(order, \"buy\"))}\n                </ul>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"col-sm mt-5 mb-5\">\n            <div className=\"container\">\n                {orderList(buy_orders, sell_orders)}\n            </div>\n        </div>\n    )\n};\n\nexport default OrderBook;\n","import React from 'react';\nimport OrderBook from './OrderBook';\n\nconst Markets = ({ instruments }) => {\n    return (\n        <div className=\"container\" style={{verticalAlign: \"middle\"}}>\n            <div className=\"row\">\n                {instruments.map((instrument) => (\n                    <OrderBook key={instrument.id} display_order={instrument.display_order} description={instrument.desc}\n                        buy_orders={instrument.buy_orders} sell_orders={instrument.sell_orders} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Markets;","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Navigation(props) {\n    return (\n        <div className=\"navigation\">\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n                <Link className=\"navbar-brand\" to=\"/\">\n                    Prophetic\n                </Link>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className={`nav-item  ${props.location.pathname === \"/\" ? \"active\" : \"\"}`}>\n                            <Link className=\"nav-link\" to=\"/\">\n                                Markets\n                            </Link>\n                        </li>\n                        <li className={`nav-item  ${props.location.pathname === \"/accounts\" ? \"active\" : \"\"}`}>\n                            <Link className=\"nav-link\" to=\"/accounts\">\n                                Accounts\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default withRouter(Navigation);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport Accounts from './components/Accounts';\nimport Markets from './components/Markets';\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  state = {\n    accounts: [],\n    instruments: []\n  };\n\n  getInfo() {\n    fetch('https://115.70.113.222:5000/info')\n      .then(res => res.json())\n      .then((data) => {\n        data.accounts.sort((a, b) => {\n          if (a.balance > b.balance) return -1;\n          if (a.balance < b.balance) return 1;\n          return 0;\n        });\n        data.instruments.sort((a, b) => {\n          if (a.display_order < b.display_order) return -1;\n          if (a.display_order > b.display_order) return 1;\n          return 0;\n        });\n        data.instruments.map(instrument => {\n          instrument.sell_orders.reverse();\n          return instrument;\n        });\n        this.setState({\n          accounts: data.accounts,\n          instruments: data.instruments\n        });\n      })\n      .catch(console.log)\n  }\n\n  componentDidMount() {\n    this.getInfo()\n    this.interval = setInterval(() => this.getInfo(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router basename={'/discord-market-making-frontend'}>\n          <Navigation />\n          <Switch>\n            <Route path=\"/\" exact render={() => <Markets instruments = {this.state.instruments} />} />\n            <Route path=\"/accounts\" exact render={() => <Accounts accounts = {this.state.accounts}\n              instruments = {this.state.instruments} />} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}